document.addEventListener('DOMContentLoaded', () => {
    // === DOM Elementlerini Yakala ===
    // HTML dosyasÄ±ndaki ID'leri kullanarak elementleri alÄ±yoruz.
    const statusText = document.getElementById('statusText');
    const drinkButton = document.getElementById('drinkButton');
    const resetButton = document.getElementById('resetButton');
    const ayarlarPaneli = document.getElementById('ayarlarPaneli');
    const ayarlarButonu = document.getElementById('ayarlarButonu');
    const saveSettingsButton = document.getElementById('saveSettings');
    const maxAmountInput = document.getElementById('maxAmount');
    const addAmountSelect = document.getElementById('addAmount'); // Bu input'un tipi number
    const darkModeToggle = document.getElementById('darkModeToggle');
    const animatedWaterFill = document.getElementById('animatedWaterFill'); // SVG iÃ§indeki su dolgu rect'i

    // Hata ayÄ±klama iÃ§in (Console'da elementlerin yÃ¼klenip yÃ¼klenmediÄŸini kontrol edin)
    // EÄŸer bu satÄ±rlarÄ± tarayÄ±cÄ± konsolunda gÃ¶rmÃ¼yorsanÄ±z, script dosyasÄ± yÃ¼klenmiyor demektir.
    console.log("script.js yÃ¼klendi ve DOM hazÄ±r.");
    console.log("Yakalanan Elementler:");
    console.log("statusText:", statusText);
    console.log("drinkButton:", drinkButton);
    console.log("resetButton:", resetButton);
    console.log("ayarlarPaneli:", ayarlarPaneli);
    console.log("ayarlarButonu:", ayarlarButonu);
    console.log("saveSettingsButton:", saveSettingsButton);
    console.log("maxAmountInput:", maxAmountInput);
    console.log("addAmountSelect:", addAmountSelect);
    console.log("darkModeToggle:", darkModeToggle);
    console.log("animatedWaterFill:", animatedWaterFill);


    // === DeÄŸiÅŸkenleri TanÄ±mla (localStorage'dan veya varsayÄ±lan deÄŸerlerle) ===
    // Uygulama kapatÄ±lÄ±p aÃ§Ä±ldÄ±ÄŸÄ±nda son durumu hatÄ±rlamak iÃ§in localStorage kullanÄ±yoruz.
    let currentWaterAmount = parseInt(localStorage.getItem('currentWaterAmount')) || 0;
    let maxWaterAmount = parseInt(localStorage.getItem('maxWaterAmount')) || 2500;
    let addWaterAmount = parseInt(localStorage.getItem('addWaterAmount')) || 250;
    let isDarkMode = (localStorage.getItem('darkMode') === 'true'); // 'true' stringi olarak saklandÄ±ÄŸÄ± iÃ§in kontrol

    // === UygulamanÄ±n BaÅŸlangÄ±Ã§ AyarlarÄ±nÄ± Uygula ===
    // Sayfa yÃ¼klendiÄŸinde veya ayarlar kaydedildiÄŸinde Ã§alÄ±ÅŸÄ±r.
    function applyInitialSettings() {
        // Ayarlar paneli inputlarÄ±nÄ± localStorage deÄŸerleriyle gÃ¼ncelleyin
        maxAmountInput.value = maxWaterAmount;
        addAmountSelect.value = addWaterAmount;
        darkModeToggle.checked = isDarkMode; // KaranlÄ±k mod anahtarÄ±nÄ± ayarla

        // KaranlÄ±k modu HTML'in root elementine uygulayÄ±n
        if (isDarkMode) {
            document.documentElement.classList.add('dark-mode');
        } else {
            document.documentElement.classList.remove('dark-mode');
        }
        // Su seviyesini ve gÃ¶rÃ¼nÃ¼mÃ¼nÃ¼ gÃ¼ncelleyin
        updateWaterDisplay();
    }

    // === Su MiktarÄ±nÄ± Ekleme Fonksiyonu ===
    function addWater() {
        // Hedefe ulaÅŸÄ±ldÄ±ysa daha fazla su eklemeyi durdur
        if (currentWaterAmount >= maxWaterAmount) {
            return;
        }

        currentWaterAmount += addWaterAmount;

        // MiktarÄ±n maksimum hedefi aÅŸmamasÄ±nÄ± saÄŸla
        if (currentWaterAmount > maxWaterAmount) {
            currentWaterAmount = maxWaterAmount;
        }

        updateWaterDisplay(); // Su gÃ¶rÃ¼nÃ¼mÃ¼nÃ¼ gÃ¼ncelle
        saveWaterAmount();    // DeÄŸiÅŸiklikleri localStorage'a kaydet
    }

    // === Su MiktarÄ±nÄ± SÄ±fÄ±rlama Fonksiyonu ===
    function resetWater() {
        // KullanÄ±cÄ±dan onay iste
        if (confirm("TÃ¼m su miktarÄ±nÄ± sÄ±fÄ±rlamak istediÄŸinizden emin misiniz?")) {
            currentWaterAmount = 0; // Su miktarÄ±nÄ± sÄ±fÄ±rla
            updateWaterDisplay();   // GÃ¶rÃ¼nÃ¼mÃ¼ gÃ¼ncelle
            saveWaterAmount();      // DeÄŸiÅŸiklikleri localStorage'a kaydet
        }
    }

    // === Su MiktarÄ±nÄ± GÃ¶rÃ¼ntÃ¼leme ve SVG Animasyon Fonksiyonu ===
    function updateWaterDisplay() {
        // YÃ¼zdeyi hesapla
        const percentage = (currentWaterAmount / maxWaterAmount) * 100;
        
        // SVG'nin viewBox'Ä± 0 0 24 24 olduÄŸu iÃ§in, dolgu yÃ¼ksekliÄŸini bu aralÄ±kta hesaplayacaÄŸÄ±z.
        const rectMaxHeight = 24; 
        
        // newFillHeight: YÃ¼zdeye gÃ¶re rect'in alacaÄŸÄ± yÃ¼kseklik
        const newFillHeight = (percentage / 100) * rectMaxHeight;
        
        // newFillY: rect'in Y koordinatÄ±. AÅŸaÄŸÄ±dan yukarÄ±ya dolmasÄ± iÃ§in, 
        // toplam yÃ¼kseklikten dolgu yÃ¼ksekliÄŸini Ã§Ä±kararak Y konumunu buluruz.
        const newFillY = rectMaxHeight - newFillHeight; 

        // animatedWaterFill elementinin 'y' ve 'height' Ã¶zniteliklerini gÃ¼ncelle
        // Bu, SVG iÃ§indeki suyun dolma animasyonunu saÄŸlar.
        if (animatedWaterFill) { // Elementin var olduÄŸundan emin ol
            animatedWaterFill.setAttribute('y', newFillY);
            animatedWaterFill.setAttribute('height', newFillHeight);
        }

        // Durum metnini gÃ¼ncelle (Ã¶rneÄŸin "1250 ml / 2500 ml")
        if (percentage >= 100) {
            statusText.textContent = `Tebrikler! GÃ¼nlÃ¼k hedefinize ulaÅŸtÄ±nÄ±z: ${currentWaterAmount} ml`;
            statusText.style.color = 'var(--success-green)'; // BaÅŸarÄ± rengini uygula
            if (animatedWaterFill) {
                animatedWaterFill.setAttribute('fill', 'var(--success-green)'); // SVG suyunu yeÅŸil yap
            }
            drinkButton.textContent = 'Afiyet Olsun ðŸŽ‰';
            drinkButton.disabled = true; // Hedefe ulaÅŸÄ±nca butonu devre dÄ±ÅŸÄ± bÄ±rak
            drinkButton.classList.add('success-button'); // YeÅŸil stilini uygula

        } else {
            statusText.textContent = `${currentWaterAmount} ml / ${maxWaterAmount} ml`;
            statusText.style.color = 'var(--text-color)'; // Normal metin rengi
            if (animatedWaterFill) {
                animatedWaterFill.setAttribute('fill', 'var(--water-fill-color)'); // SVG suyunu normal mavi yap
            }
            drinkButton.textContent = 'Drink';
            drinkButton.disabled = false; // Butonu tekrar etkinleÅŸtir
            drinkButton.classList.remove('success-button'); // YeÅŸil stili kaldÄ±r
        }
    }

    // === Local Storage'a Verileri Kaydetme Fonksiyonu ===
    function saveWaterAmount() {
        localStorage.setItem('currentWaterAmount', currentWaterAmount);
        localStorage.setItem('maxWaterAmount', maxWaterAmount);
        localStorage.setItem('addWaterAmount', addWaterAmount);
        localStorage.setItem('darkMode', isDarkMode);
    }

    // === Ayarlar Paneli AÃ§ma/Kapama Ä°ÅŸlemi ===
    if (ayarlarButonu) { // ayarlarButonu'nun var olduÄŸundan emin ol
        ayarlarButonu.addEventListener('click', (event) => {
            event.stopPropagation(); // Bu, tÄ±klamanÄ±n paneli kapatma olayÄ±nÄ± tetiklemesini engeller.
            
            if (ayarlarPaneli) { // ayarlarPaneli'nin var olduÄŸundan emin ol
                // Panelin gÃ¶rÃ¼nÃ¼rlÃ¼ÄŸÃ¼nÃ¼ aÃ§/kapat (display: block/none)
                ayarlarPaneli.style.display = ayarlarPaneli.style.display === 'block' ? 'none' : 'block';
                
                // EÄŸer panel aÃ§Ä±lÄ±yorsa, mevcut deÄŸerleri inputlara yÃ¼kle
                if (ayarlarPaneli.style.display === 'block') {
                    maxAmountInput.value = maxWaterAmount;
                    addAmountSelect.value = addWaterAmount;
                    darkModeToggle.checked = isDarkMode;
                }
            }
        });
    }


    // === Ayarlar Paneli DÄ±ÅŸÄ±na TÄ±klayÄ±nca Kapatma ===
    // Sadece ayarlar paneli varsa bu dinleyiciyi ekle
    if (ayarlarPaneli && ayarlarButonu) {
        document.addEventListener('click', (event) => {
            // EÄŸer ayarlar paneli aÃ§Ä±ksa VE tÄ±klanan yer panelin iÃ§inde deÄŸilse VE ayarlar butonunun iÃ§inde deÄŸilse
            if (ayarlarPaneli.style.display === 'block' && 
                !ayarlarPaneli.contains(event.target) && 
                !ayarlarButonu.contains(event.target) &&
                event.target !== saveSettingsButton && // Kaydet butonuna basÄ±ldÄ±ÄŸÄ±nda kapanmasÄ±nÄ± engelle
                event.target !== resetButton // SÄ±fÄ±rla butonuna basÄ±ldÄ±ÄŸÄ±nda kapanmasÄ±nÄ± engelle
            ) {
                // AyarlarÄ± kaydetmeden paneli kapatmadan Ã¶nce inputlarÄ± eski deÄŸerlerine dÃ¶ndÃ¼r
                maxAmountInput.value = maxWaterAmount;
                addAmountSelect.value = addWaterAmount;
                darkModeToggle.checked = isDarkMode;
                ayarlarPaneli.style.display = 'none'; // Paneli kapat
            }
        });
    }

    // === AyarlarÄ± Kaydetme Fonksiyonu ===
    if (saveSettingsButton) { // saveSettingsButton'un var olduÄŸundan emin ol
        saveSettingsButton.addEventListener('click', () => {
            const newMaxAmount = parseInt(maxAmountInput.value);
            const newAddAmount = parseInt(addAmountSelect.value);
            const newIsDarkMode = darkModeToggle.checked;

            // GeÃ§erli sayÄ± kontrolleri
            if (isNaN(newMaxAmount) || newMaxAmount <= 0) {
                alert('LÃ¼tfen geÃ§erli bir gÃ¼nlÃ¼k hedef miktarÄ± girin (pozitif bir sayÄ±).');
                return;
            }
            if (isNaN(newAddAmount) || newAddAmount <= 0) {
                alert('LÃ¼tfen geÃ§erli bir iÃ§ilen su miktarÄ± girin (pozitif bir sayÄ±).');
                return;
            }

            // EÄŸer yeni hedef mevcut iÃ§ilen miktardan dÃ¼ÅŸÃ¼kse kullanÄ±cÄ±ya sor
            if (newMaxAmount < currentWaterAmount && currentWaterAmount !== 0) {
                if (!confirm(`Yeni gÃ¼nlÃ¼k hedef (${newMaxAmount} ml) mevcut iÃ§ilen su miktarÄ±nÄ±zdan (${currentWaterAmount} ml) daha dÃ¼ÅŸÃ¼k. Mevcut su miktarÄ±nÄ±z sÄ±fÄ±rlanacak. Devam etmek istiyor musunuz?`)) {
                    return; // KullanÄ±cÄ± iptal ettiyse kaydetme iÅŸlemini durdur
                }
                currentWaterAmount = 0; // Onaylarsa mevcut su miktarÄ±nÄ± sÄ±fÄ±rla
            }

            // Yeni ayarlarÄ± uygula
            maxWaterAmount = newMaxAmount;
            addWaterAmount = newAddAmount;
            isDarkMode = newIsDarkMode;

            saveWaterAmount();        // Yeni ayarlarÄ± localStorage'a kaydet
            applyInitialSettings();   // UI'yÄ± ve karanlÄ±k modu yeni ayarlara gÃ¶re gÃ¼ncelle
            
            if (ayarlarPaneli) { // ayarlarPaneli'nin var olduÄŸundan emin ol
                ayarlarPaneli.style.display = 'none'; // Ayarlar panelini kapat
            }
        });
    }


    // === Event Dinleyicileri (Butonlara TÄ±klama) ===
    if (drinkButton) { // drinkButton'un var olduÄŸundan emin ol
        drinkButton.addEventListener('click', addWater); // "Drink" butonuna tÄ±klama olayÄ±nÄ± dinle
    }
    if (resetButton) { // resetButton'un var olduÄŸundan emin ol
        resetButton.addEventListener('click', resetWater); // "SÄ±fÄ±rla" butonuna tÄ±klama olayÄ±nÄ± dinle
    }

    // === Uygulama YÃ¼klendiÄŸinde Ä°lk Kez BaÅŸlangÄ±Ã§ AyarlarÄ±nÄ± Uygula ===
    // Bu, sayfa ilk aÃ§Ä±ldÄ±ÄŸÄ±nda localStorage'dan alÄ±nan deÄŸerleri ekrana yansÄ±tÄ±r.
    applyInitialSettings();
});
