document.addEventListener('DOMContentLoaded', () => {
    // DOM Elementlerini Yakala
    const statusText = document.getElementById('statusText');
    const drinkButton = document.getElementById('drinkButton');
    const resetButton = document.getElementById('resetButton');
    const ayarlarPaneli = document.getElementById('ayarlarPaneli');
    const ayarlarButonu = document.getElementById('ayarlarButonu'); // Ayarlar butonunu yakala
    const saveSettingsButton = document.getElementById('saveSettings');
    const maxAmountInput = document.getElementById('maxAmount');
    const addAmountSelect = document.getElementById('addAmount');
    const darkModeToggle = document.getElementById('darkModeToggle');
    // Yeni SVG animasyon elementini yakala
    const animatedWaterFill = document.getElementById('animatedWaterFill'); 

    // Deƒüi≈ükenleri tanƒ±mla (localStorage'dan veya varsayƒ±lan deƒüerlerle)
    let currentWaterAmount = parseInt(localStorage.getItem('currentWaterAmount')) || 0;
    let maxWaterAmount = parseInt(localStorage.getItem('maxWaterAmount')) || 2500;
    let addWaterAmount = parseInt(localStorage.getItem('addWaterAmount')) || 250;
    let isDarkMode = (localStorage.getItem('darkMode') === 'true'); // String olarak saklandƒ±ƒüƒ± i√ßin 'true' stringine e≈üit mi diye kontrol et

    // Uygulamanƒ±n Ba≈ülangƒ±√ß Ayarlarƒ±
    maxAmountInput.value = maxWaterAmount;
    addAmountSelect.value = addWaterAmount;
    darkModeToggle.checked = isDarkMode; // Toggle'ƒ± localStorage'daki deƒüere g√∂re ayarla

    // Karanlƒ±k Modu Uygula
    if (isDarkMode) {
        document.documentElement.classList.add('dark-mode');
    } else {
        document.documentElement.classList.remove('dark-mode');
    }

    // Su Miktarƒ±nƒ± Ekleme Fonksiyonu
    function addWater() {
        // Eƒüer hedef a≈üƒ±ldƒ±ysa, daha fazla ekleme
        if (currentWaterAmount >= maxWaterAmount) {
            return;
        }

        currentWaterAmount += addWaterAmount;

        // Hedefi a≈ümamak i√ßin kontrol
        if (currentWaterAmount > maxWaterAmount) {
            currentWaterAmount = maxWaterAmount;
        }

        updateWaterDisplay();
        saveWaterAmount();
    }

    // Su Miktarƒ±nƒ± Sƒ±fƒ±rlama Fonksiyonu
    function resetWater() {
        if (confirm("T√ºm su miktarƒ±nƒ± sƒ±fƒ±rlamak istediƒüinizden emin misiniz?")) {
            currentWaterAmount = 0;
            updateWaterDisplay();
            saveWaterAmount();
        }
    }

    // Su Miktarƒ±nƒ± G√∂r√ºnt√ºleme ve Animasyon Fonksiyonu
    function updateWaterDisplay() {
        const percentage = (currentWaterAmount / maxWaterAmount) * 100;
        
        // √ñnemli Deƒüi≈üiklik: animatedWaterFill'in y√ºksekliƒüini ve rengini g√ºncelliyoruz
        // SVG'de 'height' attribute'unu ayarlayarak animasyon saƒülƒ±yoruz.
        // viewBox 0 0 24 24 olduƒüu i√ßin, %'yi 24'e oranla hesaplamamƒ±z gerekebilir
        // Ancak 'height' √∂zniteliƒüi y√ºzde deƒüerini de alabilir, deneyelim.
        // animatedWaterFill.setAttribute('height', `${percentage}%`); // Bu direct y√ºzde olarak √ßalƒ±≈ümazsa
        // SVG'nin 'height' deƒüeri bottom'dan yukarƒ± doƒüru artmalƒ±.
        // rect'in y deƒüeri de deƒüi≈ümeli ki a≈üaƒüƒ±dan yukarƒ±ya dolsun.
        // Dolgunun y√ºksekliƒüini 0'dan 24'e kadar ayarlayacaƒüƒ±z
        // ve y konumunu (24 - dolguY√ºksekliƒüi) olarak ayarlayacaƒüƒ±z.
        
        const fillHeight = (percentage / 100) * 24; // 24 birimlik viewBox i√ßinde ne kadar dolacak
        const fillY = 24 - fillHeight; // Dolgunun y ba≈ülangƒ±√ß noktasƒ± (a≈üaƒüƒ±dan yukarƒ±ya doƒüru)

        animatedWaterFill.setAttribute('y', `${fillY}`);
        animatedWaterFill.setAttribute('height', `${fillHeight}`);

        if (percentage >= 100) {
            statusText.textContent = `Tebrikler! G√ºnl√ºk hedefinize ula≈ütƒ±nƒ±z: ${currentWaterAmount} ml`;
            statusText.style.color = 'var(--success-green)';
            
            // Ba≈üarƒ± durumunda SVG dolgusunun rengini deƒüi≈ütir
            animatedWaterFill.setAttribute('fill', 'var(--success-green)');
            
            drinkButton.textContent = 'Afiyet Olsun üéâ';
            drinkButton.disabled = true;
            drinkButton.classList.add('success-button');

        } else {
            statusText.textContent = `${currentWaterAmount} ml / ${maxWaterAmount} ml`;
            statusText.style.color = 'var(--text-color)';
            
            // Normal durumda SVG dolgusunun rengini deƒüi≈ütir
            animatedWaterFill.setAttribute('fill', 'var(--water-fill-color)');
            
            drinkButton.textContent = 'Drink';
            drinkButton.disabled = false;
            drinkButton.classList.remove('success-button');
        }
    }

    // Local Storage'a kaydetme fonksiyonu
    function saveWaterAmount() {
        localStorage.setItem('currentWaterAmount', currentWaterAmount);
        localStorage.setItem('maxWaterAmount', maxWaterAmount);
        localStorage.setItem('addWaterAmount', addWaterAmount);
        localStorage.setItem('darkMode', isDarkMode);
    }

    // Ayarlar Paneli A√ßma/Kapama
    ayarlarButonu.addEventListener('click', () => {
        ayarlarPaneli.style.display = ayarlarPaneli.style.display === 'block' ? 'none' : 'block';
        // Ayarlar panelini a√ßarken mevcut deƒüerleri inputlara y√ºkle
        if (ayarlarPaneli.style.display === 'block') {
            maxAmountInput.value = maxWaterAmount;
            addAmountSelect.value = addWaterAmount;
            darkModeToggle.checked = isDarkMode;
        }
    });

    // Ayarlar Paneli Dƒ±≈üƒ±na Tƒ±klayƒ±nca Kapatma ve ƒ∞ptal Etme
    document.addEventListener('click', (event) => {
        // Eƒüer tƒ±klanan yer panelin veya ayarlar butonunun i√ßinde deƒüilse ve panel a√ßƒ±ksa
        if (!ayarlarPaneli.contains(event.target) && !ayarlarButonu.contains(event.target) && ayarlarPaneli.style.display === 'block') {
            // Deƒüi≈üiklikleri iptal et, inputlarƒ± son kaydedilen deƒüerlere geri d√∂nd√ºr
            maxAmountInput.value = maxWaterAmount; 
            addAmountSelect.value = addWaterAmount; 
            darkModeToggle.checked = isDarkMode; 
            
            ayarlarPaneli.style.display = 'none'; // Paneli kapat
        }
    });

    // Ayarlarƒ± Kaydetme Fonksiyonu
    saveSettingsButton.addEventListener('click', () => {
        const newMaxAmount = parseInt(maxAmountInput.value);
        const newAddAmount = parseInt(addAmountSelect.value);
        const newIsDarkMode = darkModeToggle.checked;

        // Ge√ßerli sayƒ± kontrol√º
        if (isNaN(newMaxAmount) || newMaxAmount <= 0) {
            alert('L√ºtfen ge√ßerli bir g√ºnl√ºk hedef miktarƒ± girin (pozitif bir sayƒ±).');
            return;
        }

        // Eƒüer yeni hedef mevcut miktardan k√º√ß√ºkse ve mevcut miktar sƒ±fƒ±rdan farklƒ±ysa uyar
        if (newMaxAmount < currentWaterAmount && currentWaterAmount !== 0) {
            if (!confirm(`Yeni g√ºnl√ºk hedef (${newMaxAmount} ml) mevcut i√ßilen su miktarƒ±nƒ±zdan (${currentWaterAmount} ml) daha d√º≈ü√ºk. Mevcut su miktarƒ±nƒ±z sƒ±fƒ±rlanacak. Devam etmek istiyor musunuz?`)) {
                return; // Kullanƒ±cƒ± iptal etti
            }
            currentWaterAmount = 0; // Mevcut su miktarƒ±nƒ± sƒ±fƒ±rla
        }

        maxWaterAmount = newMaxAmount;
        addWaterAmount = newAddAmount;
        isDarkMode = newIsDarkMode;

        saveWaterAmount(); // Yeni ayarlarƒ± kaydet
        updateWaterDisplay(); // Ekranƒ± g√ºncelle
        
        // Karanlƒ±k modu anƒ±nda uygula
        if (isDarkMode) {
            document.documentElement.classList.add('dark-mode');
        } else {
            document.documentElement.classList.remove('dark-mode');
        }

        ayarlarPaneli.style.display = 'none'; // Ayarlar panelini kapat
    });

    // Event Dinleyicileri
    drinkButton.addEventListener('click', addWater);
    resetButton.addEventListener('click', resetWater);

    // Uygulama y√ºklendiƒüinde ilk kez g√∂r√ºnt√ºle
    updateWaterDisplay();
});
