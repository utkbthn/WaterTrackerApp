const DEFAULT_MAX_WATER_AMOUNT = 2500;
const DEFAULT_ADD_AMOUNT = 250;

let currentWaterAmount = parseInt(localStorage.getItem("water")) || 0;
let maxWaterGoal = parseInt(localStorage.getItem("maxWater")) || DEFAULT_MAX_WATER_AMOUNT;
let addWaterAmount = parseInt(localStorage.getItem("addAmount")) || DEFAULT_ADD_AMOUNT;

// KaranlÄ±k mod deÄŸiÅŸkeni ve localStorage'dan oku
// EÄŸer 'darkMode' localStorage'da yoksa veya 'false' ise, isDarkMode da false olur.
let isDarkMode = localStorage.getItem("darkMode") === "true";

// HTML elementlerine referanslar
const progressBar = document.getElementById("progressBar");
const statusDisplay = document.getElementById("status");
const darkModeToggle = document.getElementById("darkModeToggle"); // HTML'den karanlÄ±k mod checkbox'Ä±nÄ± al
const body = document.body; // HTML'deki body etiketine referans

let lastResetDate = localStorage.getItem("lastResetDate");

// --- Yeni Fonksiyon: applyTheme() ---
// Bu fonksiyon, isDarkMode deÄŸiÅŸkenine gÃ¶re body etiketine "dark-mode" sÄ±nÄ±fÄ±nÄ± ekler veya kaldÄ±rÄ±r.
function applyTheme() {
    if (isDarkMode) {
        body.classList.add("dark-mode");
    } else {
        body.classList.remove("dark-mode");
    }
}

// Tarihi YYYY-MM-DD formatÄ±nda string olarak dÃ¶ndÃ¼ren yardÄ±mcÄ± fonksiyon
function getTodayDateString() {
    const today = new Date();
    const year = today.getFullYear();
    const month = (today.getMonth() + 1).toString().padStart(2, '0');
    const day = today.getDate().toString().padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// GÃ¼n deÄŸiÅŸtiyse su miktarÄ±nÄ± sÄ±fÄ±rlayan fonksiyon
function resetWaterIfNewDay() {
    const todayDate = getTodayDateString();
    if (lastResetDate !== todayDate) {
        resetWater(); // Su miktarÄ±nÄ± sÄ±fÄ±rla
        lastResetDate = todayDate; // Son sÄ±fÄ±rlama tarihini bugÃ¼nÃ¼n tarihi yap
        localStorage.setItem("lastResetDate", lastResetDate); // localStorage'a kaydet
    }
}

// EkranÄ± gÃ¼ncelleyen fonksiyon (ilerleme Ã§ubuÄŸu ve metin)
function updateDisplay() {
    let percent = (currentWaterAmount / maxWaterGoal) * 100;
    if (percent > 100) percent = 100; // %100'Ã¼ geÃ§mesin
    if (percent < 0) percent = 0;   // %0'Ä±n altÄ±na inmesin

    progressBar.style.width = percent + "%";
    statusDisplay.innerText = `${currentWaterAmount} ml / ${maxWaterGoal} ml`;

    const drinkButton = document.getElementById("drinkButton");
    if (drinkButton) {
        if (currentWaterAmount >= maxWaterGoal) {
            drinkButton.innerText = "Afiyet Olsun! ðŸŽ‰";
            drinkButton.style.backgroundColor = "var(--success-green)"; // Hedefe ulaÅŸÄ±ldÄ±ÄŸÄ±nda yeÅŸil buton
            drinkButton.style.cursor = "default"; // TÄ±klanamaz yapsak daha iyi
        } else {
            drinkButton.innerText = "Drink";
            drinkButton.style.backgroundColor = "var(--primary-blue)"; // Normal mavi buton
            drinkButton.style.cursor = "pointer";
        }
    }
}

// Su ekleme fonksiyonu
function addWater() {
    if (currentWaterAmount < maxWaterGoal) { // Hedefe ulaÅŸÄ±lmadÄ±ysa ekleme yap
        currentWaterAmount += addWaterAmount;
        if (currentWaterAmount > maxWaterGoal) { // Hedefi aÅŸarsa hedef miktarÄ±na sabitle
            currentWaterAmount = maxWaterGoal;
        }
        localStorage.setItem("water", currentWaterAmount); // localStorage'a kaydet
        updateDisplay(); // EkranÄ± gÃ¼ncelle
    }
}

// Suyu sÄ±fÄ±rlama fonksiyonu
function resetWater() {
    currentWaterAmount = 0;
    localStorage.setItem("water", currentWaterAmount);
    const drinkButton = document.getElementById("drinkButton");
    if (drinkButton) {
        drinkButton.innerText = "Drink";
        drinkButton.style.backgroundColor = "var(--primary-blue)";
        drinkButton.style.cursor = "pointer";
    }
    updateDisplay(); // EkranÄ± gÃ¼ncelle
    // Ayarlar paneli aÃ§Ä±ksa kapat
    if (document.getElementById("settingsPanel").style.display === "block") {
        document.getElementById("settingsPanel").style.display = "none";
    }
}

// Ayarlar panelini aÃ§ma/kapatma fonksiyonu
function openSettings() {
    const settingsPanel = document.getElementById("settingsPanel");
    document.getElementById("maxAmount").value = maxWaterGoal;
    document.getElementById("addAmount").value = addWaterAmount;

    // --- GÃ¼ncelleme: KaranlÄ±k mod anahtarÄ±nÄ±n durumunu gÃ¼ncelle ---
    darkModeToggle.checked = isDarkMode; // Checkbox'Ä±n mevcut tema durumunu yansÄ±tmasÄ±nÄ± saÄŸlar

    if (settingsPanel.style.display === "none" || settingsPanel.style.display === "") {
        settingsPanel.style.display = "block"; // Paneli gÃ¶ster
    } else {
        settingsPanel.style.display = "none"; // Paneli gizle
    }
}

// AyarlarÄ± kaydetme ve paneli kapatma fonksiyonu
function saveAndCloseSettings() {
    const newMax = parseInt(document.getElementById("maxAmount").value);
    const newAdd = parseInt(document.getElementById("addAmount").value);

    // GÃ¼nlÃ¼k hedef doÄŸrulama
    if (isNaN(newMax) || newMax < 500) {
        alert("GÃ¼nlÃ¼k hedef en az 500 ml olmalÄ± ve sayÄ±sal bir deÄŸer girilmelidir!");
        document.getElementById("maxAmount").value = maxWaterGoal; // GeÃ§ersiz deÄŸeri geri yÃ¼kle
        return; // Fonksiyondan Ã§Ä±k
    }

    maxWaterGoal = newMax;
    localStorage.setItem("maxWater", maxWaterGoal); // localStorage'a kaydet

    // Ä°Ã§ilecek miktar doÄŸrulama
    if (!isNaN(newAdd)) {
        addWaterAmount = newAdd;
        localStorage.setItem("addAmount", addWaterAmount); // localStorage'a kaydet
    }

    // --- GÃ¼ncelleme: KaranlÄ±k mod tercihini kaydet ve uygula ---
    isDarkMode = darkModeToggle.checked; // Checkbox'Ä±n mevcut durumunu al
    localStorage.setItem("darkMode", isDarkMode); // Durumu localStorage'a kaydet
    applyTheme(); // Yeni temayÄ± hemen uygula

    updateDisplay(); // EkranÄ± gÃ¼ncelle
    document.getElementById("settingsPanel").style.display = "none"; // Paneli kapat
}

// Tips BaloncuÄŸu FonksiyonlarÄ±
const tips = [
    "Su iÃ§meyi unutmayÄ±n! GÃ¼nde en az 8 bardak su hedefini deneyin.",
    "Susuzluk hissettiÄŸinizde, vÃ¼cudunuz zaten hafifÃ§e susuz kalmÄ±ÅŸtÄ±r. DÃ¼zenli su iÃ§in.",
    "Egzersiz yapÄ±yorsanÄ±z daha fazla suya ihtiyacÄ±nÄ±z olabilir.",
    "Yemeklerden Ã¶nce bir bardak su iÃ§mek iÅŸtahÄ±nÄ±zÄ± kontrol etmenize yardÄ±mcÄ± olabilir.",
    "SÄ±k sÄ±k baÅŸ aÄŸrÄ±sÄ± Ã§ekiyorsanÄ±z, dehidrasyonun bir nedeni olup olmadÄ±ÄŸÄ±nÄ± kontrol edin.",
    "Meyve ve sebzeler de su iÃ§erir. Dengeli beslenmeye Ã¶zen gÃ¶sterin.",
    "Kahve ve alkol vÃ¼cudunuzdan su atÄ±lmasÄ±na neden olabilir, tÃ¼ketiminizi dengeleyin.",
    "GÃ¼n iÃ§inde kÃ¼Ã§Ã¼k yudumlarla su iÃ§mek, bÃ¼yÃ¼k miktarlarda bir anda iÃ§mekten daha faydalÄ±dÄ±r.",
    "Su ÅŸiÅŸenizi yanÄ±nÄ±zda taÅŸÄ±yarak su iÃ§me alÄ±ÅŸkanlÄ±ÄŸÄ±nÄ±zÄ± pekiÅŸtirin."
];

let currentTipIndex = 0;
const tipBubble = document.getElementById("tipBubble");
const tipContent = document.getElementById("tipContent");

function showNextTip() {
    tipBubble.classList.remove('show'); // BaloncuÄŸu gizle
    setTimeout(() => {
        currentTipIndex = (currentTipIndex + 1) % tips.length; // Bir sonraki ipucuna geÃ§
        tipContent.innerText = tips[currentTipIndex]; // Ä°Ã§eriÄŸi gÃ¼ncelle
        tipBubble.classList.add('show'); // BaloncuÄŸu tekrar gÃ¶ster
    }, 500); // GeÃ§iÅŸ sÃ¼resi kadar bekle (CSS transition ile aynÄ± olmalÄ±)
}

// KullanÄ±cÄ± baloncuÄŸa tÄ±klarsa, bir sonraki ipucuna geÃ§sin
tipBubble.addEventListener('click', showNextTip);

// Sayfa yÃ¼klendiÄŸinde Ã§alÄ±ÅŸacak fonksiyon
window.onload = function () {
    resetWaterIfNewDay(); // Yeni gÃ¼n kontrolÃ¼ ve sÄ±fÄ±rlama
    updateDisplay(); // EkranÄ± gÃ¼ncelle
    applyTheme(); // --- Yeni: Sayfa yÃ¼klendiÄŸinde kaydedilmiÅŸ temayÄ± uygula ---
    showNextTip(); // Ä°lk ipucunu gÃ¶ster
    setInterval(showNextTip, 7200000); // 2 saatte bir ipucunu deÄŸiÅŸtir (7.200.000 ms)
};

// --- Yeni: KaranlÄ±k mod anahtarÄ± deÄŸiÅŸtiÄŸinde temayÄ± gÃ¼ncelle ---
darkModeToggle.addEventListener("change", () => {
    isDarkMode = darkModeToggle.checked; // Checkbox'Ä±n yeni durumunu al
    localStorage.setItem("darkMode", isDarkMode); // Durumu localStorage'a kaydet
    applyTheme(); // Yeni temayÄ± hemen uygula
});
