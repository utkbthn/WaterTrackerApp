const DEFAULT_MAX_WATER_AMOUNT = 2500;
const DEFAULT_ADD_AMOUNT = 250;

let currentWaterAmount = parseInt(localStorage.getItem("water")) || 0;
let maxWaterGoal = parseInt(localStorage.getItem("maxWater")) || DEFAULT_MAX_WATER_AMOUNT;
let addWaterAmount = parseInt(localStorage.getItem("addAmount")) || DEFAULT_ADD_AMOUNT;

let isDarkMode = localStorage.getItem("darkMode") === "true";

const progressBar = document.getElementById("progressBar"); // BurasÄ± progressBar olarak doÄŸru ayarlandÄ±
const statusDisplay = document.getElementById("status");
const darkModeToggle = document.getElementById("darkModeToggle");    
const rootElement = document.documentElement;    

let lastResetDate = localStorage.getItem("lastResetDate");

function applyTheme() {
    if (isDarkMode) {
        rootElement.classList.add("dark-mode");
    } else {
        rootElement.classList.remove("dark-mode");
    }
}

// Tarihi YYYY-MM-DD formatÄ±nda string olarak dÃ¶ndÃ¼ren yardÄ±mcÄ± fonksiyon
function getTodayDateString() {
    const today = new Date();
    const year = today.getFullYear();
    const month = (today.getMonth() + 1).toString().padStart(2, '0');
    const day = today.getDate().toString().padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// GÃ¼n deÄŸiÅŸtiyse su miktarÄ±nÄ± sÄ±fÄ±rlayan fonksiyon
function resetWaterIfNewDay() {
    const todayDate = getTodayDateString();
    if (lastResetDate !== todayDate) {
        resetWater(); // Su miktarÄ±nÄ± sÄ±fÄ±rla
        lastResetDate = todayDate; // Son sÄ±fÄ±rlama tarihini bugÃ¼nÃ¼n tarihi yap
        localStorage.setItem("lastResetDate", lastResetDate); // localStorage'a kaydet
    }
}

function updateDisplay() {
    let percent = (currentWaterAmount / maxWaterGoal) * 100;
    if (percent > 100) percent = 100;
    if (percent < 0) percent = 0;

    progressBar.style.width = percent + "%"; // ProgressBar iÃ§in 'width' kullanÄ±ldÄ±
    
    statusDisplay.innerText = `${currentWaterAmount} ml / ${maxWaterGoal} ml`;

    const drinkButton = document.getElementById("drinkButton");
    if (drinkButton) {
        if (currentWaterAmount >= maxWaterGoal) {
            drinkButton.innerText = "Afiyet Olsun! ðŸŽ‰";
            drinkButton.style.backgroundColor = "var(--success-green)"; 
            drinkButton.style.cursor = "default";
        } else {
            drinkButton.innerText = "Drink";
            drinkButton.style.backgroundColor = "var(--primary-blue)";
            drinkButton.style.cursor = "pointer";
        }
    }
}

// Su ekleme fonksiyonu
function addWater() {
    if (currentWaterAmount < maxWaterGoal) {
        currentWaterAmount += addWaterAmount;
        if (currentWaterAmount > maxWaterGoal) {
            currentWaterAmount = maxWaterGoal;
        }
        localStorage.setItem("water", currentWaterAmount);
        updateDisplay();
    }
}

// Suyu sÄ±fÄ±rlama fonksiyonu
function resetWater() {
    currentWaterAmount = 0;
    localStorage.setItem("water", currentWaterAmount);
    const drinkButton = document.getElementById("drinkButton");
    if (drinkButton) {
        drinkButton.innerText = "Drink";
        drinkButton.style.backgroundColor = "var(--primary-blue)";
        drinkButton.style.cursor = "pointer";
    }
    updateDisplay();
    if (document.getElementById("settingsPanel").style.display === "block") {
        document.getElementById("settingsPanel").style.display = "none";
    }
}

// Ayarlar panelini aÃ§ma/kapatma fonksiyonu
function openSettings() {
    const settingsPanel = document.getElementById("settingsPanel");
    document.getElementById("maxAmount").value = maxWaterGoal;
    document.getElementById("addAmount").value = addWaterAmount;

    darkModeToggle.checked = isDarkMode;

    if (settingsPanel.style.display === "none" || settingsPanel.style.display === "") {
        settingsPanel.style.display = "block";
    } else {
        settingsPanel.style.display = "none";
    }
}

// AyarlarÄ± kaydetme ve paneli kapatma fonksiyonu
function saveAndCloseSettings() {
    const newMax = parseInt(document.getElementById("maxAmount").value);
    const newAdd = parseInt(document.getElementById("addAmount").value);

    if (isNaN(newMax) || newMax < 500) {
        alert("GÃ¼nlÃ¼k hedef en az 500 ml olmalÄ± ve sayÄ±sal bir deÄŸer girilmelidir!");
        document.getElementById("maxAmount").value = maxWaterGoal;
        return;
    }

    maxWaterGoal = newMax;
    localStorage.setItem("maxWater", maxWaterGoal);

    if (!isNaN(newAdd)) {
        addWaterAmount = newAdd;
        localStorage.setItem("addAmount", addWaterAmount);
    }

    isDarkMode = darkModeToggle.checked;
    localStorage.setItem("darkMode", isDarkMode);
    applyTheme();

    updateDisplay();
    document.getElementById("settingsPanel").style.display = "none";
}

// Tips BaloncuÄŸu FonksiyonlarÄ±
const tips = [
    "Su iÃ§meyi unutmayÄ±n! GÃ¼nde en az 8 bardak su hedefini deneyin.",
    "Susuzluk hissettiÄŸinizde, vÃ¼cudunuz zaten hafifÃ§e susuz kalmÄ±ÅŸtÄ±r. DÃ¼zenli su iÃ§in.",
    "Egzersiz yapÄ±yorsanÄ±z daha fazla suya ihtiyacÄ±nÄ±z olabilir.",
    "Yemeklerden Ã¶nce bir bardak su iÃ§mek iÅŸtahÄ±nÄ±zÄ± kontrol etmenize yardÄ±mcÄ± olabilir.",
    "SÄ±k sÄ±k baÅŸ aÄŸrÄ±sÄ± Ã§ekiyorsanÄ±z, dehidrasyonun bir nedeni olup olmadÄ±ÄŸÄ±nÄ± kontrol edin.",
    "Meyve ve sebzeler de su iÃ§erir. Dengeli beslenmeye Ã¶zen gÃ¶sterin.",
    "Kahve ve alkol vÃ¼cudunuzdan su atÄ±lmasÄ±na neden olabilir, tÃ¼ketiminizi dengeleyin.",
    "GÃ¼n iÃ§inde kÃ¼Ã§Ã¼k yudumlarla su iÃ§mek, bÃ¼yÃ¼k miktarlarda bir anda iÃ§mekten daha faydalÄ±dÄ±r.",
    "Su ÅŸiÅŸenizi yanÄ±nÄ±zda taÅŸÄ±yarak su iÃ§me alÄ±ÅŸkanlÄ±ÄŸÄ±nÄ±zÄ± pekiÅŸtirin."
];

let currentTipIndex = 0;
const tipBubble = document.getElementById("tipBubble");
const tipContent = document.getElementById("tipContent");

function showNextTip() {
    tipBubble.classList.remove('show');
    setTimeout(() => {
        currentTipIndex = (currentTipIndex + 1) % tips.length;
        tipContent.innerText = tips[currentTipIndex];
        tipBubble.classList.add('show');
    }, 500);
}

tipBubble.addEventListener('click', showNextTip);

// Sayfa yÃ¼klendiÄŸinde Ã§alÄ±ÅŸacak fonksiyon
window.onload = function () {
    resetWaterIfNewDay();
    updateDisplay();
    applyTheme();
    showNextTip();
    setInterval(showNextTip, 7200000); // 2 saatte bir ipucunu deÄŸiÅŸtir (7.200.000 ms)
};

// KaranlÄ±k mod anahtarÄ± deÄŸiÅŸtiÄŸinde temayÄ± gÃ¼ncelle
darkModeToggle.addEventListener("change", () => {
    isDarkMode = darkModeToggle.checked;
    localStorage.setItem("darkMode", isDarkMode);
    applyTheme();
});
