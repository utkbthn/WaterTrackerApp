const DEFAULT_MAX_WATER_AMOUNT = 2500;
const DEFAULT_ADD_AMOUNT = 250;

let currentWaterAmount;
let maxWaterGoal;
let addWaterAmount;
let isDarkMode;

const statusDisplay = document.getElementById("status");
const darkModeToggle = document.getElementById("darkModeToggle");
const rootElement = document.documentElement;
const settingsPanel = document.getElementById("settingsPanel");
const addAmountSelect = document.getElementById("addAmount");
const maxAmountInput = document.getElementById("maxAmount");
const drinkButton = document.getElementById("drinkButton");
const settingsButton = document.getElementById("settingsButton");
const saveSettingsButton = document.getElementById("saveSettingsButton");
const resetWaterButton = document.getElementById("resetWaterButton");
const tipBubble = document.getElementById("tipBubble"); // HTML'de display: none olduÄŸu iÃ§in hala burada kalabilir.
const tipContent = document.getElementById("tipContent"); // tipBubble ile birlikte kalabilir.

const waterFillProgress = document.getElementById("waterFillProgress");

let lastResetDate;

function loadInitialSettings() {
    currentWaterAmount = Number(localStorage.getItem("water"));
    if (isNaN(currentWaterAmount)) currentWaterAmount = 0;

    maxWaterGoal = Number(localStorage.getItem("maxWater"));
    if (isNaN(maxWaterGoal) || maxWaterGoal < 500) maxWaterGoal = DEFAULT_MAX_WATER_AMOUNT;

    addWaterAmount = Number(localStorage.getItem("addAmount"));
    if (isNaN(addWaterAmount)) addWaterAmount = DEFAULT_ADD_AMOUNT;

    isDarkMode = localStorage.getItem("darkMode") === "true";
    lastResetDate = localStorage.getItem("lastResetDate");
}

function applyTheme() {
    if (isDarkMode) {
        rootElement.classList.add("dark-mode");
    } else {
        rootElement.classList.remove("dark-mode");
    }
    if (darkModeToggle) {
        darkModeToggle.checked = isDarkMode;
    }
}

function getTodayDateString() {
    const today = new Date();
    const year = today.getFullYear();
    const month = (today.getMonth() + 1).toString().padStart(2, '0');
    const day = today.getDate().toString().padStart(2, '0');
    return `${year}-${month}-${day}`;
}

function resetWaterIfNewDay() {
    const todayDate = getTodayDateString();
    if (lastResetDate !== todayDate) {
        resetWater(true);
        lastResetDate = todayDate;
        localStorage.setItem("lastResetDate", lastResetDate);
    }
}

function updateDisplay() {
    let percent = (currentWaterAmount / maxWaterGoal) * 100;
    percent = Math.min(Math.max(percent, 0), 100);

    waterFillProgress.style.height = percent + "%";
    statusDisplay.innerText = `${currentWaterAmount} ml / ${maxWaterGoal} ml`;

    if (drinkButton) {
        if (currentWaterAmount >= maxWaterGoal) {
            drinkButton.innerText = "Afiyet Olsun! ðŸŽ‰";
            drinkButton.style.backgroundColor = "var(--success-green)";
            drinkButton.style.cursor = "default";

            // ***** SADECE AFÄ°YET OLSUN! ðŸŽ‰ YAZISI Ä°Ã‡Ä°N BOYUT AYARLAMALARI BAÅžLANGICI *****
            // Normal (varsayÄ±lan) gÃ¶rÃ¼nÃ¼m iÃ§in - Ã–nceki 13px -> 12px, Ã–nceki 8px -> 7px
            drinkButton.style.fontSize = "12px"; // Afiyet Olsun iÃ§in varsayÄ±lan font boyutu (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
            drinkButton.style.paddingLeft = "7px"; // (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
            drinkButton.style.paddingRight = "7px"; // (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
            // Dikey paddingleri deÄŸiÅŸtirmene gerek kalmaz, butonun yÃ¼ksekliÄŸi CSS'ten sabit.

            // Telefon/Medya SorgularÄ± iÃ§in Ã–zel BoyutlandÄ±rmalar (JavaScript ile)
            const width = window.innerWidth;
            const height = window.innerHeight;

            // KÃ¼Ã§Ã¼k ekranlar (max-width: 375px) - Ã–nceki 11.5px -> 10.5px, Ã–nceki 6px -> 5px
            if (width <= 375) {
                drinkButton.style.fontSize = "10.5px"; // (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
                drinkButton.style.paddingLeft = "5px"; // (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
                drinkButton.style.paddingRight = "5px"; // (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
            }
            // BÃ¼yÃ¼k ekranlar (min-width: 414px) - Ã–nceki 14px -> 13px, Ã–nceki 13px -> 12px
            else if (width >= 414) {
                drinkButton.style.fontSize = "13px"; // BÃ¼yÃ¼k ekranlarda Afiyet Olsun iÃ§in biraz daha bÃ¼yÃ¼k font (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
                drinkButton.style.paddingLeft = "12px"; // (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
                drinkButton.style.paddingRight = "12px"; // (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
            }

            // Yatay konum ve kÃ¼Ã§Ã¼k yÃ¼kseklik (orientation: landscape and max-height: 500px)
            // CihazÄ±n yatay konumda olup olmadÄ±ÄŸÄ±nÄ± ve yÃ¼ksekliÄŸinin dÃ¼ÅŸÃ¼k olup olmadÄ±ÄŸÄ±nÄ± kontrol et
            // Ã–nceki 11.5px -> 10.5px, Ã–nceki 6px -> 5px
            if (height <= 500 && width > height) { // GeniÅŸlik yÃ¼kseklikten fazlaysa yataydÄ±r
                drinkButton.style.fontSize = "10.5px"; // (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
                drinkButton.style.paddingLeft = "5px"; // (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
                drinkButton.style.paddingRight = "5px"; // (1px dÃ¼ÅŸÃ¼rÃ¼ldÃ¼)
            }
            // ***** SADECE AFÄ°YET OLSUN! ðŸŽ‰ YAZISI Ä°Ã‡Ä°N BOYUT AYARLAMALARI SONU *****

        } else {
            drinkButton.innerText = "Drink";
            drinkButton.style.backgroundColor = "var(--primary-blue)";
            drinkButton.style.cursor = "pointer";

            // ***** SADECE DRINK YAZISI Ä°Ã‡Ä°N BOYUT AYARLAMALARI BAÅžLANGICI *****
            // CSS'ten gelecek varsayÄ±lan deÄŸerlere sÄ±fÄ±rlamak en iyisidir.
            // Bunun iÃ§in inline style'larÄ± temizleyebiliriz.
            drinkButton.style.fontSize = ""; // CSS'teki varsayÄ±lan boyutu kullanÄ±r
            drinkButton.style.paddingLeft = ""; // CSS'teki varsayÄ±lan padding'i kullanÄ±r
            drinkButton.style.paddingRight = ""; // CSS'teki varsayÄ±lan padding'i kullanÄ±r
            drinkButton.style.paddingTop = ""; // CSS'teki varsayÄ±lan padding'i kullanÄ±r
            drinkButton.style.paddingBottom = ""; // CSS'teki varsayÄ±lan padding'i kullanÄ±r


            // Medya SorgularÄ± ile CSS'te belirlenen "Drink" boyutlarÄ±nÄ± tekrar uygulamak iÃ§in
            // AslÄ±nda yukarÄ±daki boÅŸ string atamalarÄ± yeterli olur, Ã§Ã¼nkÃ¼ tarayÄ±cÄ± CSS'teki medya sorgularÄ±nÄ± uygular.
            // Ancak garanti olmasÄ± iÃ§in veya Ã¶zel durumlar iÃ§in JavaScript ile de belirtebiliriz.
            const width = window.innerWidth;
            const height = window.innerHeight;

            if (width <= 375) { // KÃ¼Ã§Ã¼k ekranlar
                // drinkButton.style.fontSize = "14px"; // Zaten CSS'ten gelmeli, istersen buraya ekle
                // drinkButton.style.paddingLeft = "10px";
                // drinkButton.style.paddingRight = "10px";
            } else if (width >= 414) { // BÃ¼yÃ¼k ekranlar
                // drinkButton.style.fontSize = "17px"; // Zaten CSS'ten gelmeli, istersen buraya ekle
                // drinkButton.style.paddingLeft = "18px";
                // drinkButton.style.paddingRight = "18px";
            }

            if (height <= 500 && width > height) { // Yatay kÃ¼Ã§Ã¼k ekranlar
                // drinkButton.style.fontSize = "14px"; // Zaten CSS'ten gelmeli, istersen buraya ekle
                // drinkButton.style.paddingLeft = "10px";
                // drinkButton.style.paddingRight = "10px";
            }
            // ***** SADECE DRINK YAZISI Ä°Ã‡Ä°N BOYUT AYARLAMALARI SONU *****
        }
    }
}

function addWater() {
    if (currentWaterAmount < maxWaterGoal) {
        currentWaterAmount += addWaterAmount;
        if (currentWaterAmount > maxWaterGoal) {
            currentWaterAmount = maxWaterGoal;
        }
        localStorage.setItem("water", currentWaterAmount);
        updateDisplay();
    }
}

function resetWater(isAutoReset = false) {
    currentWaterAmount = 0;
    localStorage.setItem("water", currentWaterAmount);
    // Reset yapÄ±ldÄ±ÄŸÄ±nda butonu "Drink" durumuna dÃ¶ndÃ¼r ve stilini sÄ±fÄ±rla
    if (drinkButton) {
        drinkButton.innerText = "Drink";
        drinkButton.style.backgroundColor = "var(--primary-blue)";
        drinkButton.style.cursor = "pointer";
        // Stil sÄ±fÄ±rlama (CSS'e geri dÃ¶nmesini saÄŸlar)
        drinkButton.style.fontSize = "";
        drinkButton.style.paddingLeft = "";
        drinkButton.style.paddingRight = "";
        drinkButton.style.paddingTop = "";
        drinkButton.style.paddingBottom = "";
    }
    updateDisplay(); // Bu Ã§aÄŸrÄ± iÃ§indeki stil ayarlamalarÄ± da tekrar Ã§alÄ±ÅŸacak
    if (!isAutoReset && settingsPanel.style.display === "block") {
        settingsPanel.style.display = "none";
    }
}

function toggleSettings() {
    if (settingsPanel.style.display === "none" || settingsPanel.style.display === "") {
        maxAmountInput.value = maxWaterGoal;
        addAmountSelect.value = addWaterAmount;
        darkModeToggle.checked = isDarkMode;
        settingsPanel.style.display = "block";
    } else {
        settingsPanel.style.display = "none";
    }
}

function saveAndCloseSettings() {
    const newMax = Number(maxAmountInput.value);
    const newAdd = Number(addAmountSelect.value);

    if (isNaN(newMax) || newMax < 500) {
        alert("GÃ¼nlÃ¼k hedef en az 500 ml olmalÄ± ve sayÄ±sal bir deÄŸer girilmelidir!");
        maxAmountInput.value = maxWaterGoal;
        return;
    }

    maxWaterGoal = newMax;
    localStorage.setItem("maxWater", maxWaterGoal);

    if (!isNaN(newAdd)) {
        addWaterAmount = newAdd;
        localStorage.setItem("addAmount", addWaterAmount);
    }

    isDarkMode = darkModeToggle.checked;
    localStorage.setItem("darkMode", isDarkMode);
    applyTheme();

    updateDisplay(); // Yeni hedefle ekranÄ± gÃ¼ncelle, buton stilini de gÃ¼nceller
    settingsPanel.style.display = "none";
}

// Event Listeners
drinkButton.addEventListener('click', addWater);
settingsButton.addEventListener('click', toggleSettings);
saveSettingsButton.addEventListener('click', saveAndCloseSettings);
resetWaterButton.addEventListener('click', () => resetWater(false));

darkModeToggle.addEventListener("change", () => {
    isDarkMode = darkModeToggle.checked;
    localStorage.setItem("darkMode", isDarkMode);
    applyTheme();
});

// Sayfa yÃ¼klendiÄŸinde ve boyut deÄŸiÅŸtiÄŸinde veya yÃ¶n deÄŸiÅŸtirildiÄŸinde
window.onload = function () {
    loadInitialSettings();
    resetWaterIfNewDay();
    updateDisplay(); // Ä°lk yÃ¼klemede ve boyut deÄŸiÅŸikliklerinde stil doÄŸru ayarlanÄ±r
    applyTheme();
    settingsPanel.style.display = "none";
};

// Ekran boyutu deÄŸiÅŸtiÄŸinde veya cihaz yÃ¶nÃ¼ deÄŸiÅŸtiÄŸinde de updateDisplay'i Ã§aÄŸÄ±r
window.addEventListener('resize', updateDisplay);
